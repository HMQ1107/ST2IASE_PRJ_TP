$date
	Wed Apr 05 16:48:22 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module stimulus $end
$var wire 32 ! price [31:0] $end
$var reg 16 " size [15:0] $end
$scope module dut $end
$var wire 1 # c_in $end
$var wire 16 $ size [15:0] $end
$var wire 32 % prod_res [31:0] $end
$var wire 32 & price [31:0] $end
$var wire 1 ' c_out $end
$var wire 1 ( c_int $end
$var reg 16 ) INTERCEPT [15:0] $end
$var reg 16 * SLOPE [15:0] $end
$scope module adder1 $end
$var wire 16 + a [15:0] $end
$var wire 16 , b [15:0] $end
$var wire 1 # cin $end
$var wire 16 - s [15:0] $end
$var wire 1 ( cout $end
$var wire 1 . c_int $end
$scope module add1 $end
$var wire 8 / a [7:0] $end
$var wire 8 0 b [7:0] $end
$var wire 1 # cin $end
$var wire 8 1 s [7:0] $end
$var wire 1 . cout $end
$var wire 8 2 carry [7:0] $end
$scope module add0 $end
$var wire 1 3 a $end
$var wire 1 4 b $end
$var wire 1 # cin $end
$var wire 1 5 cout $end
$var wire 1 6 s $end
$upscope $end
$scope module add1 $end
$var wire 1 7 a $end
$var wire 1 8 b $end
$var wire 1 9 cin $end
$var wire 1 : cout $end
$var wire 1 ; s $end
$upscope $end
$scope module add2 $end
$var wire 1 < a $end
$var wire 1 = b $end
$var wire 1 > cin $end
$var wire 1 ? cout $end
$var wire 1 @ s $end
$upscope $end
$scope module add3 $end
$var wire 1 A a $end
$var wire 1 B b $end
$var wire 1 C cin $end
$var wire 1 D cout $end
$var wire 1 E s $end
$upscope $end
$scope module add4 $end
$var wire 1 F a $end
$var wire 1 G b $end
$var wire 1 H cin $end
$var wire 1 I cout $end
$var wire 1 J s $end
$upscope $end
$scope module add5 $end
$var wire 1 K a $end
$var wire 1 L b $end
$var wire 1 M cin $end
$var wire 1 N cout $end
$var wire 1 O s $end
$upscope $end
$scope module add6 $end
$var wire 1 P a $end
$var wire 1 Q b $end
$var wire 1 R cin $end
$var wire 1 S cout $end
$var wire 1 T s $end
$upscope $end
$scope module add7 $end
$var wire 1 U a $end
$var wire 1 V b $end
$var wire 1 W cin $end
$var wire 1 X cout $end
$var wire 1 Y s $end
$upscope $end
$upscope $end
$scope module add2 $end
$var wire 8 Z a [7:0] $end
$var wire 8 [ b [7:0] $end
$var wire 1 . cin $end
$var wire 8 \ s [7:0] $end
$var wire 1 ( cout $end
$var wire 8 ] carry [7:0] $end
$scope module add0 $end
$var wire 1 ^ a $end
$var wire 1 _ b $end
$var wire 1 . cin $end
$var wire 1 ` cout $end
$var wire 1 a s $end
$upscope $end
$scope module add1 $end
$var wire 1 b a $end
$var wire 1 c b $end
$var wire 1 d cin $end
$var wire 1 e cout $end
$var wire 1 f s $end
$upscope $end
$scope module add2 $end
$var wire 1 g a $end
$var wire 1 h b $end
$var wire 1 i cin $end
$var wire 1 j cout $end
$var wire 1 k s $end
$upscope $end
$scope module add3 $end
$var wire 1 l a $end
$var wire 1 m b $end
$var wire 1 n cin $end
$var wire 1 o cout $end
$var wire 1 p s $end
$upscope $end
$scope module add4 $end
$var wire 1 q a $end
$var wire 1 r b $end
$var wire 1 s cin $end
$var wire 1 t cout $end
$var wire 1 u s $end
$upscope $end
$scope module add5 $end
$var wire 1 v a $end
$var wire 1 w b $end
$var wire 1 x cin $end
$var wire 1 y cout $end
$var wire 1 z s $end
$upscope $end
$scope module add6 $end
$var wire 1 { a $end
$var wire 1 | b $end
$var wire 1 } cin $end
$var wire 1 ~ cout $end
$var wire 1 !" s $end
$upscope $end
$scope module add7 $end
$var wire 1 "" a $end
$var wire 1 #" b $end
$var wire 1 $" cin $end
$var wire 1 %" cout $end
$var wire 1 &" s $end
$upscope $end
$upscope $end
$upscope $end
$scope module adder2 $end
$var wire 16 '" a [15:0] $end
$var wire 16 (" b [15:0] $end
$var wire 1 ( cin $end
$var wire 16 )" s [15:0] $end
$var wire 1 ' cout $end
$var wire 1 *" c_int $end
$scope module add1 $end
$var wire 8 +" a [7:0] $end
$var wire 8 ," b [7:0] $end
$var wire 1 ( cin $end
$var wire 8 -" s [7:0] $end
$var wire 1 *" cout $end
$var wire 8 ." carry [7:0] $end
$scope module add0 $end
$var wire 1 /" a $end
$var wire 1 0" b $end
$var wire 1 ( cin $end
$var wire 1 1" cout $end
$var wire 1 2" s $end
$upscope $end
$scope module add1 $end
$var wire 1 3" a $end
$var wire 1 4" b $end
$var wire 1 5" cin $end
$var wire 1 6" cout $end
$var wire 1 7" s $end
$upscope $end
$scope module add2 $end
$var wire 1 8" a $end
$var wire 1 9" b $end
$var wire 1 :" cin $end
$var wire 1 ;" cout $end
$var wire 1 <" s $end
$upscope $end
$scope module add3 $end
$var wire 1 =" a $end
$var wire 1 >" b $end
$var wire 1 ?" cin $end
$var wire 1 @" cout $end
$var wire 1 A" s $end
$upscope $end
$scope module add4 $end
$var wire 1 B" a $end
$var wire 1 C" b $end
$var wire 1 D" cin $end
$var wire 1 E" cout $end
$var wire 1 F" s $end
$upscope $end
$scope module add5 $end
$var wire 1 G" a $end
$var wire 1 H" b $end
$var wire 1 I" cin $end
$var wire 1 J" cout $end
$var wire 1 K" s $end
$upscope $end
$scope module add6 $end
$var wire 1 L" a $end
$var wire 1 M" b $end
$var wire 1 N" cin $end
$var wire 1 O" cout $end
$var wire 1 P" s $end
$upscope $end
$scope module add7 $end
$var wire 1 Q" a $end
$var wire 1 R" b $end
$var wire 1 S" cin $end
$var wire 1 T" cout $end
$var wire 1 U" s $end
$upscope $end
$upscope $end
$scope module add2 $end
$var wire 8 V" a [7:0] $end
$var wire 8 W" b [7:0] $end
$var wire 1 *" cin $end
$var wire 8 X" s [7:0] $end
$var wire 1 ' cout $end
$var wire 8 Y" carry [7:0] $end
$scope module add0 $end
$var wire 1 Z" a $end
$var wire 1 [" b $end
$var wire 1 *" cin $end
$var wire 1 \" cout $end
$var wire 1 ]" s $end
$upscope $end
$scope module add1 $end
$var wire 1 ^" a $end
$var wire 1 _" b $end
$var wire 1 `" cin $end
$var wire 1 a" cout $end
$var wire 1 b" s $end
$upscope $end
$scope module add2 $end
$var wire 1 c" a $end
$var wire 1 d" b $end
$var wire 1 e" cin $end
$var wire 1 f" cout $end
$var wire 1 g" s $end
$upscope $end
$scope module add3 $end
$var wire 1 h" a $end
$var wire 1 i" b $end
$var wire 1 j" cin $end
$var wire 1 k" cout $end
$var wire 1 l" s $end
$upscope $end
$scope module add4 $end
$var wire 1 m" a $end
$var wire 1 n" b $end
$var wire 1 o" cin $end
$var wire 1 p" cout $end
$var wire 1 q" s $end
$upscope $end
$scope module add5 $end
$var wire 1 r" a $end
$var wire 1 s" b $end
$var wire 1 t" cin $end
$var wire 1 u" cout $end
$var wire 1 v" s $end
$upscope $end
$scope module add6 $end
$var wire 1 w" a $end
$var wire 1 x" b $end
$var wire 1 y" cin $end
$var wire 1 z" cout $end
$var wire 1 {" s $end
$upscope $end
$scope module add7 $end
$var wire 1 |" a $end
$var wire 1 }" b $end
$var wire 1 ~" cin $end
$var wire 1 !# cout $end
$var wire 1 "# s $end
$upscope $end
$upscope $end
$upscope $end
$scope module prod1 $end
$var wire 16 ## a [15:0] $end
$var wire 16 $# b [15:0] $end
$var reg 32 %# result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 %#
b1001110001000 $#
b0 ##
0"#
0!#
0~"
0}"
0|"
0{"
0z"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
0Z"
b0 Y"
b0 X"
b0 W"
b0 V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
0N"
0M"
0L"
0K"
0J"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
03"
02"
01"
00"
0/"
b0 ."
b0 -"
b0 ,"
b0 +"
0*"
b0 )"
b0 ("
b0 '"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
1z
0y
0x
1w
0v
0u
0t
0s
0r
0q
0p
0o
0n
0m
0l
1k
0j
0i
1h
0g
1f
0e
0d
1c
0b
1a
0`
1_
0^
b0 ]
b100111 \
b100111 [
b0 Z
0Y
0X
0W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
1J
0I
0H
1G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
05
04
03
b0 2
b10000 1
b10000 0
b0 /
0.
b10011100010000 -
b10011100010000 ,
b0 +
b1001110001000 *
b10011100010000 )
0(
0'
b10011100010000 &
b0 %
b0 $
0#
b0 "
b10011100010000 !
$end
#20000
1p
1n
1j
1&"
1$"
0k
1i
1~
1e
0f
1d
1}
1`
b1100111 ]
1y
b10 )"
b10 -"
17"
13"
0a
1^
1u
1q
0z
1v
b101001100000010000 !
b101001100000010000 &
b1001100000010000 -
b10011000 \
0!"
1{
b10 +"
b1110001 Z
b10 '"
b111000100000000 +
b100111000100000000 %
b100111000100000000 %#
b100000 "
b100000 $
b100000 ##
#40000
0A"
0?"
0;"
0:"
06"
17"
05"
b0 ."
01"
0$"
0(
0~
b100111 ]
0%"
12"
1/"
b111 )"
b111 -"
1<"
18"
b110000 1
1O
1K
0u
0q
1!"
0{
b1111100100000110000 !
b1111100100000110000 &
b1100100000110000 -
b11001000 \
1&"
1""
b111 +"
b100000 /
b10100001 Z
b111 '"
b1010000100100000 +
b1111010000100100000 %
b1111010000100100000 %#
b1100100 "
b1100100 $
b1100100 ##
#60000
0:"
06"
17"
05"
b0 ."
01"
0p
0n
0j
12"
0(
1k
0i
0%"
0e
1M
1f
0d
0}
1&"
0$"
b10000 2
1I
0`
0y
b0 ]
0~
b11 )"
b11 -"
0<"
08"
0J
1F
1O
0K
b10100000 1
1Y
1U
1a
0^
1u
1q
1z
0v
b111111011110100000 !
b111111011110100000 &
b1111011110100000 -
b11110111 \
1!"
1{
b11 +"
b10010000 /
b11010000 Z
b11 '"
b1101000010010000 +
b111101000010010000 %
b111101000010010000 %#
b110010 "
b110010 $
b110010 ##
#80000
